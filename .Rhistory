data("AirPassengers")
class(AirPassengers)
start(AirPassengers)
end(AirPassengers)
plot(AirPassengers)
abline(reg=lm(AirPassengers~time(AirPassengers)))
library(tseries)
# Read data from csv file
my.files <- read.table(file.choose(), header = TRUE, sep = ";")
my.files
subscribers <- ts(my.files, frequency = 12, start = c(2000,1))
subscribers
plot.ts(subscribers)
my.files <- read.table(file.choose(), header = TRUE, sep = ",")
my.files
birthtimeseries <- ts(my.files, frequency=12, start=c(1946,2))
birthtimeseries
# Read data from csv file
my.files <- read.table(file.choose(), header = TRUE, sep = ",")
my.files
birthtimeseries <- ts(my.files, frequency=12, start=c(1946,2), end = c(1952,3))
birthtimeseries
# Read data from csv file
my.files <- read.table(file.choose(), header = TRUE, sep = ",")
my.files
birthtimeseries <- ts(my.files, frequency=1, start=c(1,1))
birthtimeseries
# Read data from csv file
my.files <- read.table(file.choose(), header = TRUE, sep = ",")
my.files
birthtimeseries <- ts(my.files, frequency=1, start=c(1,1))
birthtimeseries
# Read data from csv file
my.files <- read.table(file.choose(), header = TRUE, sep = ",")
my.files
birthtimeseries <- ts(my.files, frequency=1, start=c(1,1))
birthtimeseries
plot.ts(birthtimeseries)
my.files <- read.table(file.choose(), header = TRUE, sep = ",")
my.files
birthtimeseries <- ts(my.files, frequency=1, start=c(1,1))
birthtimeseries
plot.ts(birthtimeseries)
# Read data from csv file
my.files <- read.table(file.choose(), header = TRUE, sep = ",")
my.files
birthtimeseries <- ts(my.files, frequency=12, start=c(2000,1))
birthtimeseries
plot.ts(birthtimeseries)
# Read data from csv file
my.files <- read.table(file.choose(), header = TRUE, sep = ",")
my.files
birthtimeseries <- ts(my.files, frequency=12, start=c(2000,1))
birthtimeseries
plot.ts(birthtimeseries)
# Read data from csv file
library('TTR')
my.files <- read.table(file.choose(), header = TRUE, sep = ",")
my.files
birthtimeseries <- ts(my.files, frequency=12, start=c(2000,1))
birthtimeseries
decomposedseries <- decompose(birthtimeseries)
plot.ts(decomposedseries)
# Read data from csv file
library('TTR')
my.files <- read.table(file.choose(), header = TRUE, sep = ",")
my.files
birthtimeseries <- ts(my.files, frequency=12, start=c(2000,1))
birthtimeseries
decomposedseries <- decompose(birthtimeseries)
decomposedseries$seasonal
decomposedseries$trend
decomposedseries$random
plot(decomposedseries$trend)
plot(decomposedseries$random)
plot(decomposedseries$seasonal)
# Read data from csv file
my.files <- read.table(file.choose(), header = TRUE, sep = ",")
my.files
birthtimeseries <- ts(my.files, frequency=12, start=c(1946,2))
birthtimeseries
birthtimeseries <- window(my.files, frequency=12, start=c(1946,2))
birthtimeseries
birthtimeseries <- window(my.files, frequency=12, start=c(2000,1))
birthtimeseries
birthtimeseries <- window(my.files, frequency=12, start=c(2000,1))
birthtimeseries
birthtimeseries <- window(my.files, frequency=12, start=c(2000,1))
birthtimeseries
# Read data from csv file
my.files <- read.table(file.choose(), header = TRUE, sep = ",")
my.files
birthtimeseries <- ts(my.files, frequency=12, start=c(1946,2))
birthtimeseries
birthtimeseries2 <- window(my.files, frequency=12, start=c(2000,1))
birthtimeseries2
# Read data from text file
my.files <- read.table(file.choose(), header = TRUE, sep = ",")
my.files
my.files2 <- read.table(file.choose(), header = TRUE, sep = ",")
my.files2
series1 <- ts(my.files, frequency=12, start=c(2000,1))
series1
series2 <- ts(my.files2, frequency=12, start = c(2011,1))
series2
plot.ts(series1)
plot.ts(series2)
both.ts <- cbind(series1, series2)
class(both.ts)
both.ts <- cbind(series1, series2)
class(both.ts)
window(both.ts, start=c(2005, 1), end=c(2015,12))
plot(window(sbux.ts, start=c(2005,1), end=c(2015,12)),
+ ylab="Prices",col="blue", lwd=2,
+ main="THE TWO PLOTS")
both.ts <- cbind(series1, series2)
class(both.ts)
window(both.ts, start=c(2005, 1), end=c(2015,12))
plot(window(sbux.ts, start=c(2005,1), end=c(2015,12)),
+ ylab="Prices",col="blue", lwd=2,
+ main="THE TWO PLOTS")
plot(window(both.ts, start=c(2000,3), end=c(2008,3)),
+ ylab="PRICES",col="blue", lwd=2,
+ main="THE TWO PLOTS")
plot(window(both.ts, start=c(2000,3), end=c(2008,3)),
ylab="PRICES",col="blue", lwd=2,
main="THE TWO PLOTS")
plot(window(both.ts, start=c(2000,1), end=c(2004,12)),
ylab="PRICES",col="blue", lwd=2,
main="THE TWO PLOTS")
source('J:/Time series.R')
library(shiny)
runExample()
runExample("01_hello")
runApp('C:/Users/EMMA CHRISTIAN/Desktop/Shinyapp')
shinyUI(fluidPage(
titlePanel(title= "This is my first shiny app"),
sidebarLayout(
sidebarPanel("This is the side bar panel"),
mainPanel("Text otput is displayed here")
)
)
)
runApp('C:/Users/EMMA CHRISTIAN/Desktop/Shinyapp')
install.packages(shinydashboard)
library(shiny)
runApp('C:/Users/EMMA CHRISTIAN/Desktop/App3.R')
runApp('C:/Users/EMMA CHRISTIAN/Desktop/Nssf.R')
runApp('C:/Users/EMMA CHRISTIAN/Desktop/App3.R')
library(shiny); runApp('C:/Users/EMMA CHRISTIAN/Desktop/Nssf.R')
runApp('C:/Users/EMMA CHRISTIAN/Desktop/R PROGRAMMING/Nssf.R')
runApp('C:/Users/EMMA CHRISTIAN/Desktop/R PROGRAMMING/App3.R')
library(shiny); runApp('C:/Users/EMMA CHRISTIAN/Desktop/R PROGRAMMING/App3.R')
library(shiny); runApp('C:/Users/EMMA CHRISTIAN/Desktop/R PROGRAMMING/App3.R')
shiny::runApp('C:/Users/EMMA CHRISTIAN/Desktop/Shinyapp')
runApp('C:/Users/EMMA CHRISTIAN/Desktop/Shinyapp')
runApp('C:/Users/EMMA CHRISTIAN/Desktop/shiny project/project.R')
runApp('C:/Users/EMMA CHRISTIAN/Desktop/shiny project/project.R')
runApp('C:/Users/EMMA CHRISTIAN/Desktop/Shinyapp')
runApp('C:/Users/EMMA CHRISTIAN/Desktop/Shinyapp')
runApp('C:/Users/EMMA CHRISTIAN/Desktop/shinyproject')
runApp('C:/Users/EMMA CHRISTIAN/Desktop/shinyproject')
runApp('J:/shiny2/App3.R')
runApp('C:/Users/EMMA CHRISTIAN/Desktop/shinyproject')
install.packages(grid)
install.packages("gridExtra")
myfile <- c(1,2,3)
myfile
library(faithful)
hist(eruptions)
install.packages("dplyr")
install.packages("data.table")
install.packages("maps")
install.packages("mapdata")
install.packages("ggplot2")
install.packages("colorspace")
install.packages("sqldf")
shiny::runApp('C:/Users/EMMA CHRISTIAN/Desktop/shinyproject')
install.packages("DT")
library(shiny); runApp('C:/Users/EMMA CHRISTIAN/Desktop/R PROGRAMMING/jjuuko.R')
install.packages("DT")
readf<-read.csv("dataset.csv")
k<-table(readf$Operator)
shiny::runApp('C:/Users/EMMA CHRISTIAN/Desktop/shinyproject')
runApp('C:/Users/EMMA CHRISTIAN/Desktop/shinyproject')
library(tm)
library(tm)
library(ggplot2)
library(reshape2)
library(wordcloud)
library(RColorBrewer)
library(quanteda)
library(syuzhet)
path = "C:/Users/The Ben/Documents/TextMining"
dir = DirSource(paste(path,"pos/",sep=""), encoding = "UTF-8")
newFile = Corpus(dir)
nssfchat<-as.character(newFile$Chatcontent)
#the get_nrc_sentiment returns a data frame in which each
#row represents a sentence from the original file
nssfchat<-get_nrc_sentiment(nssfchat)
nssfchat<-data.frame(t(nssfchat))
#Rowsums function performs sums of columns across each character grouping
nssfchatNew<-data.frame(rowSums(nssfchat[1:1294]))
#Transforomation and cleaning
names(nssfchatNew)[1]<-"count"
nssfchatNew<-cbind("Sentiment" = rownames(nssfchatNew),nssfchatNew)
rownames(nssfchatNew)<-NULL
nssfchatclean<-nssfchatNew[1:8,]
#visualization
qplot(Sentiment, data = nssfchatclean, weight=count, geom = "bar", fill=Sentiment) +ggtitle("NSSF Chat Sentiments")
plot(
nssfchatclean,
type="l",
main="Plot Trajectory of Emotions",
xlab = "Emotions",
ylab= "Emotional Valence"
)
path = "C:\Users\EMMA CHRISTIAN\Desktop\Shinyapp"
path = "C:/Users/EMMA CHRISTIAN/Desktop/Shinyapp"
library(tm)
library(ggplot2)
library(reshape2)
library(wordcloud)
library(RColorBrewer)
library(RWeka)
library(quanteda)
library(syuzhet)
newFile<-read.csv(file.choose(), header = TRUE)
#newFile
nssfdata<-newFile$Chatcontent
nssfdata<-tolower(nssfdata)
nssfdata<-paste(nssfdata, collapse = "")
nssfdata<-VCorpus(VectorSource(nssfdata))
inspect(nssfdata)
nssfdata.ng = tm_map(nssfdata,removeWords,c(stopwords("english"),"welcome to nssf live chat, hold on while we attend to your query",
"olivia kyomugisha tamale","date of birth", "mother", "name", "father's name","one","prefer","like to know","can","get","send",
"diana","catherine","profulla kumar sarker","akurut","chat","nssf","system assistant","visitor has closed the chat explicitly",
"has accepted the chat","poover kyomugisha","customerservice@nssfug.org","samali nalwoga","nearest", "office","good morning","thank",
"Kindly Call","they will be of help","kindly change","please follow that link","otto denis rugumayo","thanks",
"fathers name","patel tusharkumar","please call","copy and paste","just type","hello","try","want to know"
,"pkyomugisha@nssfug.org","has closed the chat!","https://www.nssfug.org/Home/est","help",
"snalwoga (snalwoga@nssfug.org) has closed the chat!","(pkyomugisha@nssfug.org)","let",
"will","assist","view","yes","please","snalwoganssfugorg","kisakye damali"))
inspect(nssfdata.ng)
nssfdata.ng = tm_map(nssfdata.ng,removePunctuation)
nssfdata.ng = tm_map(nssfdata.ng,removeNumbers)
class(nssfdata.ng)
#use Weka's n-gram tokenizer to create a TDM
TrigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 4))
nssfdata_trigram = TermDocumentMatrix(nssfdata.ng,
control = list(tokenize = TrigramTokenizer))
freq = sort(rowSums(as.matrix(nssfdata_trigram)),decreasing = TRUE)
freq.df = data.frame(word=names(freq), freq=freq)
head(freq.df, 20)
pal=brewer.pal(8,"Blues")
pal=pal[-(1:3)]
wordcloud(freq.df$word,freq.df$freq,max.words=200,random.order = F, colors=pal)
require(RWeka)
library(tm)
library(tm)
library(ggplot2)
library(reshape2)
library(wordcloud)
library(RColorBrewer)
library(RWeka)
library(quanteda)
library(syuzhet)
newFile<-read.csv(file.choose(), header = TRUE)
#newFile
nssfdata<-newFile$Chatcontent
nssfdata<-tolower(nssfdata)
nssfdata<-paste(nssfdata, collapse = "")
nssfdata<-VCorpus(VectorSource(nssfdata))
inspect(nssfdata)
nssfdata.ng = tm_map(nssfdata,removeWords,c(stopwords("english"),"welcome to nssf live chat, hold on while we attend to your query",
"olivia kyomugisha tamale","date of birth", "mother", "name", "father's name","one","prefer","like to know","can","get","send",
"diana","catherine","profulla kumar sarker","akurut","chat","nssf","system assistant","visitor has closed the chat explicitly",
"has accepted the chat","poover kyomugisha","customerservice@nssfug.org","samali nalwoga","nearest", "office","good morning","thank",
"Kindly Call","they will be of help","kindly change","please follow that link","otto denis rugumayo","thanks",
"fathers name","patel tusharkumar","please call","copy and paste","just type","hello","try","want to know"
,"pkyomugisha@nssfug.org","has closed the chat!","https://www.nssfug.org/Home/est","help",
"snalwoga (snalwoga@nssfug.org) has closed the chat!","(pkyomugisha@nssfug.org)","let",
"will","assist","view","yes","please","snalwoganssfugorg","kisakye damali"))
inspect(nssfdata.ng)
nssfdata.ng = tm_map(nssfdata.ng,removePunctuation)
nssfdata.ng = tm_map(nssfdata.ng,removeNumbers)
class(nssfdata.ng)
#use Weka's n-gram tokenizer to create a TDM
TrigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 4))
nssfdata_trigram = TermDocumentMatrix(nssfdata.ng,
control = list(tokenize = TrigramTokenizer))
freq = sort(rowSums(as.matrix(nssfdata_trigram)),decreasing = TRUE)
freq.df = data.frame(word=names(freq), freq=freq)
head(freq.df, 20)
pal=brewer.pal(8,"Blues")
pal=pal[-(1:3)]
wordcloud(freq.df$word,freq.df$freq,max.words=200,random.order = F, colors=pal)
ggplot(head(freq.df,15), aes(reorder(word,freq), freq)) +
geom_bar(stat="identity") + coord_flip() +
xlab("Questions") + ylab("Frequency") +
ggtitle("Most common questions asked")
library(tm)
library(ggplot2)
library(reshape2)
library(wordcloud)
library(RColorBrewer)
library(RWeka)
library(quanteda)
library(syuzhet)
newFile<-read.csv(file.choose(), header = TRUE)
#newFile
#path = "C:/Users/The Ben/Documents/TextMining"
#dir = DirSource(paste(path,"pos/",sep=""), encoding = "UTF-8")
#newFile = Corpus(dir)
nssfdata<-newFile$Chatcontent
nssfdata<-tolower(nssfdata)
nssfdata<-paste(nssfdata, collapse = "")
nssfdata<-VCorpus(VectorSource(nssfdata))
inspect(nssfdata)
nssfdata.ng = tm_map(nssfdata,removeWords,c(stopwords("english"),"welcome to nssf live chat, hold on while we attend to your query",
"olivia kyomugisha tamale","date of birth", "mother", "name", "father's name","one","prefer","like to know","can","get","send",
"diana","catherine","profulla kumar sarker","akurut","chat","nssf","system assistant","visitor has closed the chat explicitly",
"has accepted the chat","poover kyomugisha","customerservice@nssfug.org","samali nalwoga","nearest", "office","good morning","thank",
"Kindly Call","they will be of help","kindly change","please follow that link","otto denis rugumayo","thanks",
"fathers name","patel tusharkumar","please call","copy and paste","just type","hello","try","want to know"
,"pkyomugisha@nssfug.org","has closed the chat!","https://www.nssfug.org/Home/est","help",
"snalwoga (snalwoga@nssfug.org) has closed the chat!","(pkyomugisha@nssfug.org)","let",
"will","assist","view","yes","please","snalwoganssfugorg","kisakye damali"))
inspect(nssfdata.ng)
nssfdata.ng = tm_map(nssfdata.ng,removePunctuation)
nssfdata.ng = tm_map(nssfdata.ng,removeNumbers)
class(nssfdata.ng)
#use Weka's n-gram tokenizer to create a TDM
TrigramTokenizer <- function(x) NGramTokenizer(x, Weka_control(min = 2, max = 4))
nssfdata_trigram = TermDocumentMatrix(nssfdata.ng,
control = list(tokenize = TrigramTokenizer))
freq = sort(rowSums(as.matrix(nssfdata_trigram)),decreasing = TRUE)
freq.df = data.frame(word=names(freq), freq=freq)
head(freq.df, 20)
pal=brewer.pal(8,"Blues")
pal=pal[-(1:3)]
wordcloud(freq.df$word,freq.df$freq,max.words=200,random.order = F, colors=pal)
ggplot(head(freq.df,15), aes(reorder(word,freq), freq)) +
geom_bar(stat="identity") + coord_flip() +
xlab("Questions") + ylab("Frequency") +
ggtitle("Most common questions asked")
#keep in mind (works with dplyr package)
#nssfdata<-newFile %>% select(Chatcontent)
# select columns that start with identified characters
#nssfdata<-newFile %>% select(starts_with("c")) # starts with letter c
#other conditions that can be used with select
#select(contains()), select(ends_with()), select(matches())
#getwd()
#data<-readLines("TextMining\\csv file2 NSSF.csv")
#data<-paste(data, collapse = "")
#data
path = "C:/Users/EMMA CHRISTIAN/Desktop/shinyproject"
library("plotly")
library("ggplot2")
library("plotly")
library("ggplot2")
readf<-read.csv("dataset.csv")
k<-table(readf$Operator)
k
j<-data.frame(table(readf$Operator))
j
colnames(j)<-c("Operator","Customers")
j
operator <- j$Operator
operator
customers <- j$Customers
data <- data.frame(operator, customers)
data
League<-operator
data<-data.frame(League) # I have more variables
data
data$League <- reorder(data$League, X = data$League, FUN = function(x) -length(x))
at <- nrow(data) - as.numeric(cumsum(sort(table(data)))-0.5*sort(table(data)))
label=paste0(round(customers/sum(customers),2) * 100,"%")
#label=round(100*customers/sum(customers),"%")
p <- ggplot(data,aes(x="", fill = operators)) +
geom_bar(width = 1) +
coord_polar(theta="y") +
annotate(geom = "text", y = at, x = 1, label = label)
p
shiny::runApp('C:/Users/EMMA CHRISTIAN/Desktop/shinyproject')
shiny::runApp('C:/Users/EMMA CHRISTIAN/Desktop/shinyproject')
shiny::runApp('C:/Users/EMMA CHRISTIAN/Desktop/shinyproject')
cars
table(cars$speed)
colnames(table(cars$speed))<-c("speed","frequ")
`colnames(table(cars$speed))<-c("speed")
>
>colnames(table(cars$speed))<-c("speed")
colnames(table(cars$speed))<-c("speed")
colnames(table(cars$speed))<-c("speed")
l
x<as.data.frame(table(cars$speed))
colnames(x)<-c("speed","fre")
x
x<as.data.frame(table(cars$speed))
colnames(x)<-c("speed","fre")
x
x<as.data.frame(table(cars$speed))
colnames(x)<-c("speed","fre")
x
x<as.data.frame(table(cars$speed))
colnames(x)<-c("speed","fre")
x
x<as.data.frame(table(cars$speed))
colnames(x)<-c("speed","fre")
x
shiny::runApp('C:/Users/EMMA CHRISTIAN/Desktop/Recess project II GROUP 19/shinyproject')
